// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package sqlc_gen

import (
	"database/sql/driver"
	"fmt"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

type OauthProvider string

const (
	OauthProviderGoogle   OauthProvider = "google"
	OauthProviderFacebook OauthProvider = "facebook"
	OauthProviderGithub   OauthProvider = "github"
)

func (e *OauthProvider) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = OauthProvider(s)
	case string:
		*e = OauthProvider(s)
	default:
		return fmt.Errorf("unsupported scan type for OauthProvider: %T", src)
	}
	return nil
}

type NullOauthProvider struct {
	OauthProvider OauthProvider
	Valid         bool // Valid is true if OauthProvider is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullOauthProvider) Scan(value interface{}) error {
	if value == nil {
		ns.OauthProvider, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.OauthProvider.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullOauthProvider) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.OauthProvider), nil
}

type User struct {
	ID              uuid.UUID
	Email           string
	Username        string
	PasswordHash    *string
	IsEmailVerified *bool
	Avatar          *string
	CreatedAt       pgtype.Timestamp
}

type UserOauthAccount struct {
	UserID         uuid.UUID
	Provider       OauthProvider
	ProviderUserID string
}

type UserSession struct {
	ID                    int32
	AccessToken           string
	RefreshToken          string
	AccessTokenExpiresAt  pgtype.Timestamp
	RefreshTokenExpiresAt pgtype.Timestamp
	CreatedAt             pgtype.Timestamp
	LastUsedAt            pgtype.Timestamp
	UserID                uuid.UUID
}
