// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package sqlc_gen

import (
	"context"

	"github.com/google/uuid"
)

const createUserWithPassword = `-- name: CreateUserWithPassword :one
INSERT INTO users (email, password_hash) VALUES ($1, $2) RETURNING id
`

type CreateUserWithPasswordParams struct {
	Email        string
	PasswordHash *string
}

func (q *Queries) CreateUserWithPassword(ctx context.Context, arg CreateUserWithPasswordParams) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, createUserWithPassword, arg.Email, arg.PasswordHash)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const getUserById = `-- name: GetUserById :one
SELECT id, email, username, password_hash, is_email_verified, avatar, created_at FROM users
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUserById(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRow(ctx, getUserById, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Username,
		&i.PasswordHash,
		&i.IsEmailVerified,
		&i.Avatar,
		&i.CreatedAt,
	)
	return i, err
}
